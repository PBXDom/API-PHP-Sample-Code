<?php
/**
 * DefaultApi
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * <PBXDom API>
 *
 * OpenAPI spec version: 2.1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Api;

use \Swagger\Client\Configuration;
use \Swagger\Client\ApiClient;
use \Swagger\Client\ApiException;
use \Swagger\Client\ObjectSerializer;

/**
 * DefaultApi Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class DefaultApi
{

    /**
     * API Client
     *
     * @var \Swagger\Client\ApiClient instance of the ApiClient
     */
    protected $apiClient;

    /**
     * Constructor
     *
     * @param \Swagger\Client\ApiClient|null $apiClient The api client to use
     */
    public function __construct(\Swagger\Client\ApiClient $apiClient = null)
    {
        if ($apiClient == null) {
            $apiClient = new ApiClient();
            $apiClient->getConfig()->setHost('https://api.pbxdom.com');
        }

        $this->apiClient = $apiClient;
    }

    /**
     * Get API client
     *
     * @return \Swagger\Client\ApiClient get the API client
     */
    public function getApiClient()
    {
        return $this->apiClient;
    }

    /**
     * Set the API client
     *
     * @param \Swagger\Client\ApiClient $apiClient set the API client
     *
     * @return DefaultApi
     */
    public function setApiClient(\Swagger\Client\ApiClient $apiClient)
    {
        $this->apiClient = $apiClient;
        return $this;
    }

    /**
     * Operation callsGet
     *
     * .
     *
     * @param double $rpt_type Report type. (0 report, 1 widget, 2 chart). (required)
     * @param double $rpt_id Report id. (required)
     * @param float $start Start offset. (optional)
     * @param float $limit Number of results to return. Max 10K. (optional)
     * @param string $sort_by Sort column. (optional)
     * @param string $sort_type Sort mode asc/desc. (optional)
     * @param string $from_date Start date time. (optional)
     * @param string $to_date End date time. (optional)
     * @param float $duration Duration range. (optional)
     * @param string $phone List of caller phone. (optional)
     * @param string $phone1 List of dialled phones. (optional)
     * @param string $co List of trunk/co. (optional)
     * @param string $ext list of extensions. (optional)
     * @param float $pbx_id list of PBX Ids. (optional)
     * @param float $call_source list of callsource. (optional)
     * @param float $call_type list of call type signatures.(5 Unanswered Calls, 7 Transfered Calls, 8 Forwarded Calls) (optional)
     * @param float $direction list of direction.(0 incoming, 1 outgoing, 2 internal) (optional)
     * @param string $caller_name list of caller name. (optional)
     * @param string $did list of did. (optional)
     * @param string $dnis list of dnis. (optional)
     * @param string $acc list of account code. (optional)
     * @param float $ring Ring range.Seconds unit. (optional)
     * @param float $cost Cost range. (optional)
     * @param float $group Department/Group id. (optional)
     *
     * @return \Swagger\Client\Model\InlineResponse200[]
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function callsGet($rpt_type, $rpt_id, $start = null, $limit = null, $sort_by = null, $sort_type = null, $from_date = null, $to_date = null, $duration = null, $phone = null, $phone1 = null, $co = null, $ext = null, $pbx_id = null, $call_source = null, $call_type = null, $direction = null, $caller_name = null, $did = null, $dnis = null, $acc = null, $ring = null, $cost = null, $group = null)
    {
        list($response) = $this->callsGetWithHttpInfo($rpt_type, $rpt_id, $start, $limit, $sort_by, $sort_type, $from_date, $to_date, $duration, $phone, $phone1, $co, $ext, $pbx_id, $call_source, $call_type, $direction, $caller_name, $did, $dnis, $acc, $ring, $cost, $group);
        return $response;
    }


    /**
     * Operation callsGetWithHttpInfo
     *
     * .
     *
     * @param double $rpt_type Report type. (0 report, 1 widget, 2 chart). (required)
     * @param double $rpt_id Report id. (required)
     * @param float $start Start offset. (optional)
     * @param float $limit Number of results to return. Max 10K. (optional)
     * @param string $sort_by Sort column. (optional)
     * @param string $sort_type Sort mode asc/desc. (optional)
     * @param string $from_date Start date time. (optional)
     * @param string $to_date End date time. (optional)
     * @param float $duration Duration range. (optional)
     * @param string $phone List of caller phone. (optional)
     * @param string $phone1 List of dialled phones. (optional)
     * @param string $co List of trunk/co. (optional)
     * @param string $ext list of extensions. (optional)
     * @param float $pbx_id list of PBX Ids. (optional)
     * @param float $call_source list of callsource. (optional)
     * @param float $call_type list of call type signatures.(5 Unanswered Calls, 7 Transfered Calls, 8 Forwarded Calls) (optional)
     * @param float $direction list of direction.(0 incoming, 1 outgoing, 2 internal) (optional)
     * @param string $caller_name list of caller name. (optional)
     * @param string $did list of did. (optional)
     * @param string $dnis list of dnis. (optional)
     * @param string $acc list of account code. (optional)
     * @param float $ring Ring range.Seconds unit. (optional)
     * @param float $cost Cost range. (optional)
     * @param float $group Department/Group id. (optional)
     *
     * @return Array of \Swagger\Client\Model\InlineResponse200[], HTTP status code, HTTP response headers (array of strings)
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function callsGetWithHttpInfo($rpt_type, $rpt_id, $start = null, $limit = null, $sort_by = null, $sort_type = null, $from_date = null, $to_date = null, $duration = null, $phone = null, $phone1 = null, $co = null, $ext = null, $pbx_id = null, $call_source = null, $call_type = null, $direction = null, $caller_name = null, $did = null, $dnis = null, $acc = null, $ring = null, $cost = null, $group = null)
    {
        
        // verify the required parameter 'rpt_type' is set
        if ($rpt_type === null) {
            throw new \InvalidArgumentException('Missing the required parameter $rpt_type when calling callsGet');
        }

        // verify the required parameter 'rpt_id' is set
        if ($rpt_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $rpt_id when calling callsGet');
        }

        // parse inputs
        $resourcePath = "/Calls";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array());
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array());

        // query params
        if ($rpt_type !== null) {
            $queryParams['rptType'] = $this->apiClient->getSerializer()->toQueryValue($rpt_type);
        }// query params
        if ($rpt_id !== null) {
            $queryParams['rptId'] = $this->apiClient->getSerializer()->toQueryValue($rpt_id);
        }// query params
        if ($start !== null) {
            $queryParams['start'] = $this->apiClient->getSerializer()->toQueryValue($start);
        }// query params
        if ($limit !== null) {
            $queryParams['limit'] = $this->apiClient->getSerializer()->toQueryValue($limit);
        }// query params
        if ($sort_by !== null) {
            $queryParams['sortBy'] = $this->apiClient->getSerializer()->toQueryValue($sort_by);
        }// query params
        if ($sort_type !== null) {
            $queryParams['sortType'] = $this->apiClient->getSerializer()->toQueryValue($sort_type);
        }// query params
        if ($from_date !== null) {
            $queryParams['fromDate'] = $this->apiClient->getSerializer()->toQueryValue($from_date);
        }// query params
        if ($to_date !== null) {
            $queryParams['toDate'] = $this->apiClient->getSerializer()->toQueryValue($to_date);
        }// query params
        if ($duration !== null) {
            $queryParams['duration'] = $this->apiClient->getSerializer()->toQueryValue($duration);
        }// query params
        if ($phone !== null) {
            $queryParams['phone'] = $this->apiClient->getSerializer()->toQueryValue($phone);
        }// query params
        if ($phone1 !== null) {
            $queryParams['phone1'] = $this->apiClient->getSerializer()->toQueryValue($phone1);
        }// query params
        if ($co !== null) {
            $queryParams['co'] = $this->apiClient->getSerializer()->toQueryValue($co);
        }// query params
        if ($ext !== null) {
            $queryParams['ext'] = $this->apiClient->getSerializer()->toQueryValue($ext);
        }// query params
        if ($pbx_id !== null) {
            $queryParams['pbxId'] = $this->apiClient->getSerializer()->toQueryValue($pbx_id);
        }// query params
        if ($call_source !== null) {
            $queryParams['callSource'] = $this->apiClient->getSerializer()->toQueryValue($call_source);
        }// query params
        if ($call_type !== null) {
            $queryParams['callType'] = $this->apiClient->getSerializer()->toQueryValue($call_type);
        }// query params
        if ($direction !== null) {
            $queryParams['direction'] = $this->apiClient->getSerializer()->toQueryValue($direction);
        }// query params
        if ($caller_name !== null) {
            $queryParams['callerName'] = $this->apiClient->getSerializer()->toQueryValue($caller_name);
        }// query params
        if ($did !== null) {
            $queryParams['did'] = $this->apiClient->getSerializer()->toQueryValue($did);
        }// query params
        if ($dnis !== null) {
            $queryParams['dnis'] = $this->apiClient->getSerializer()->toQueryValue($dnis);
        }// query params
        if ($acc !== null) {
            $queryParams['acc'] = $this->apiClient->getSerializer()->toQueryValue($acc);
        }// query params
        if ($ring !== null) {
            $queryParams['ring'] = $this->apiClient->getSerializer()->toQueryValue($ring);
        }// query params
        if ($cost !== null) {
            $queryParams['cost'] = $this->apiClient->getSerializer()->toQueryValue($cost);
        }// query params
        if ($group !== null) {
            $queryParams['group'] = $this->apiClient->getSerializer()->toQueryValue($group);
        }
        
        
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
                // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\InlineResponse200[]'
            );
            if (!$response) {
                return array(null, $statusCode, $httpHeader);
            }

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\InlineResponse200[]', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\InlineResponse200[]', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }
    /**
     * Operation featuresChartsGet
     *
     * .
     *
     *
     * @return \Swagger\Client\Model\InlineResponse200[]
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function featuresChartsGet()
    {
        list($response) = $this->featuresChartsGetWithHttpInfo();
        return $response;
    }


    /**
     * Operation featuresChartsGetWithHttpInfo
     *
     * .
     *
     *
     * @return Array of \Swagger\Client\Model\InlineResponse200[], HTTP status code, HTTP response headers (array of strings)
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function featuresChartsGetWithHttpInfo()
    {
        
        // parse inputs
        $resourcePath = "/Features/charts";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array());
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array());

        
        
        
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
                // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\InlineResponse200[]'
            );
            if (!$response) {
                return array(null, $statusCode, $httpHeader);
            }

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\InlineResponse200[]', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\InlineResponse200[]', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }
    /**
     * Operation featuresReportsGet
     *
     * .
     *
     *
     * @return \Swagger\Client\Model\InlineResponse200[]
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function featuresReportsGet()
    {
        list($response) = $this->featuresReportsGetWithHttpInfo();
        return $response;
    }


    /**
     * Operation featuresReportsGetWithHttpInfo
     *
     * .
     *
     *
     * @return Array of \Swagger\Client\Model\InlineResponse200[], HTTP status code, HTTP response headers (array of strings)
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function featuresReportsGetWithHttpInfo()
    {
        
        // parse inputs
        $resourcePath = "/Features/reports";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array());
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array());

        
        
        
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
                // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\InlineResponse200[]'
            );
            if (!$response) {
                return array(null, $statusCode, $httpHeader);
            }

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\InlineResponse200[]', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\InlineResponse200[]', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }
    /**
     * Operation featuresWidgetGet
     *
     * .
     *
     *
     * @return \Swagger\Client\Model\InlineResponse200[]
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function featuresWidgetGet()
    {
        list($response) = $this->featuresWidgetGetWithHttpInfo();
        return $response;
    }


    /**
     * Operation featuresWidgetGetWithHttpInfo
     *
     * .
     *
     *
     * @return Array of \Swagger\Client\Model\InlineResponse200[], HTTP status code, HTTP response headers (array of strings)
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function featuresWidgetGetWithHttpInfo()
    {
        
        // parse inputs
        $resourcePath = "/Features/widget";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array());
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array());

        
        
        
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
                // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\InlineResponse200[]'
            );
            if (!$response) {
                return array(null, $statusCode, $httpHeader);
            }

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\InlineResponse200[]', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\InlineResponse200[]', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }
}
